package qns4_9

import (
	. "ctci/chapter4"
	"reflect"
	"testing"
)

func TestBSTSequences(t *testing.T) {
	type args struct {
		node *TreeNode
	}
	tests := []struct {
		name string
		args args
		want [][]int
	}{
		{"", args{}, [][]int{}},
		{"", args{&TreeNode{Data: 2}}, [][]int{{2}}},
		{"", args{
			&TreeNode{
				Data:  2,
				Left:  &TreeNode{Data: 1},
				Right: &TreeNode{Data: 3}}}, [][]int{{2, 1, 3}, {2, 3, 1}}},
		{args: args{
			&TreeNode{
				Data: 2,
				Left: &TreeNode{Data: 1},
				Right: &TreeNode{Data: 3,
					Right: &TreeNode{Data: 4}}},
		}, want: [][]int{{2, 1, 3, 4}, {2, 3, 1, 4}, {2, 3, 4, 1}}},
		{args: args{
			&TreeNode{
				Data: 2,
				Left: &TreeNode{Data: 1,
					Left: &TreeNode{}},
				Right: &TreeNode{Data: 3,
					Right: &TreeNode{Data: 4}}},
		}, want: [][]int{{2, 1, 0, 3, 4}, {2, 1, 3, 0, 4}, {2, 1, 3, 4, 0}, {2, 3, 1, 0, 4}, {2, 3, 1, 4, 0}, {2, 3, 4, 1, 0}}},
		{args: args{
			&TreeNode{
				Data: 50,
				Left: &TreeNode{Data: 20,
					Left:  &TreeNode{Data: 10},
					Right: &TreeNode{Data: 25}},
				Right: &TreeNode{Data: 60,
					Left:  &TreeNode{Data: 55},
					Right: &TreeNode{Data: 65}}},
		}, want: [][]int{{50, 20, 10, 25, 60, 55, 65}, {50, 20, 10, 60, 25, 55, 65}, {50, 20, 10, 60, 55, 25, 65}, {50, 20, 10, 60, 55, 65, 25}, {50, 20, 60, 10, 25, 55, 65}, {50, 20, 60, 10, 55, 25, 65}, {50, 20, 60, 10, 55, 65, 25}, {50, 20, 60, 55, 10, 25, 65}, {50, 20, 60, 55, 10, 65, 25}, {50, 20, 60, 55, 65, 10, 25}, {50, 60, 20, 10, 25, 55, 65}, {50, 60, 20, 10, 55, 25, 65}, {50, 60, 20, 10, 55, 65, 25}, {50, 60, 20, 55, 10, 25, 65}, {50, 60, 20, 55, 10, 65, 25}, {50, 60, 20, 55, 65, 10, 25}, {50, 60, 55, 20, 10, 25, 65}, {50, 60, 55, 20, 10, 65, 25}, {50, 60, 55, 20, 65, 10, 25}, {50, 60, 55, 65, 20, 10, 25}, {50, 20, 10, 25, 60, 65, 55}, {50, 20, 10, 60, 25, 65, 55}, {50, 20, 10, 60, 65, 25, 55}, {50, 20, 10, 60, 65, 55, 25}, {50, 20, 60, 10, 25, 65, 55}, {50, 20, 60, 10, 65, 25, 55}, {50, 20, 60, 10, 65, 55, 25}, {50, 20, 60, 65, 10, 25, 55}, {50, 20, 60, 65, 10, 55, 25}, {50, 20, 60, 65, 55, 10, 25}, {50, 60, 20, 10, 25, 65, 55}, {50, 60, 20, 10, 65, 25, 55}, {50, 60, 20, 10, 65, 55, 25}, {50, 60, 20, 65, 10, 25, 55}, {50, 60, 20, 65, 10, 55, 25}, {50, 60, 20, 65, 55, 10, 25}, {50, 60, 65, 20, 10, 25, 55}, {50, 60, 65, 20, 10, 55, 25}, {50, 60, 65, 20, 55, 10, 25}, {50, 60, 65, 55, 20, 10, 25}, {50, 20, 25, 10, 60, 55, 65}, {50, 20, 25, 60, 10, 55, 65}, {50, 20, 25, 60, 55, 10, 65}, {50, 20, 25, 60, 55, 65, 10}, {50, 20, 60, 25, 10, 55, 65}, {50, 20, 60, 25, 55, 10, 65}, {50, 20, 60, 25, 55, 65, 10}, {50, 20, 60, 55, 25, 10, 65}, {50, 20, 60, 55, 25, 65, 10}, {50, 20, 60, 55, 65, 25, 10}, {50, 60, 20, 25, 10, 55, 65}, {50, 60, 20, 25, 55, 10, 65}, {50, 60, 20, 25, 55, 65, 10}, {50, 60, 20, 55, 25, 10, 65}, {50, 60, 20, 55, 25, 65, 10}, {50, 60, 20, 55, 65, 25, 10}, {50, 60, 55, 20, 25, 10, 65}, {50, 60, 55, 20, 25, 65, 10}, {50, 60, 55, 20, 65, 25, 10}, {50, 60, 55, 65, 20, 25, 10}, {50, 20, 25, 10, 60, 65, 55}, {50, 20, 25, 60, 10, 65, 55}, {50, 20, 25, 60, 65, 10, 55}, {50, 20, 25, 60, 65, 55, 10}, {50, 20, 60, 25, 10, 65, 55}, {50, 20, 60, 25, 65, 10, 55}, {50, 20, 60, 25, 65, 55, 10}, {50, 20, 60, 65, 25, 10, 55}, {50, 20, 60, 65, 25, 55, 10}, {50, 20, 60, 65, 55, 25, 10}, {50, 60, 20, 25, 10, 65, 55}, {50, 60, 20, 25, 65, 10, 55}, {50, 60, 20, 25, 65, 55, 10}, {50, 60, 20, 65, 25, 10, 55}, {50, 60, 20, 65, 25, 55, 10}, {50, 60, 20, 65, 55, 25, 10}, {50, 60, 65, 20, 25, 10, 55}, {50, 60, 65, 20, 25, 55, 10}, {50, 60, 65, 20, 55, 25, 10}, {50, 60, 65, 55, 20, 25, 10}}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := BSTSequences(tt.args.node); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("BSTSequences() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_merge(t *testing.T) {
	type args struct {
		left   []int
		right  []int
		prefix []int
		res    [][]int
	}
	tests := []struct {
		name string
		args args
		want [][]int
	}{
		{"", args{[]int{}, []int{}, []int{}, [][]int{}}, [][]int{}},
		{"", args{[]int{1}, []int{}, []int{}, [][]int{}}, [][]int{{1}}},
		{"", args{[]int{}, []int{}, []int{1}, [][]int{}}, [][]int{{1}}},
		{"", args{[]int{}, []int{2, 3}, []int{1}, [][]int{}}, [][]int{{1, 2, 3}}},
		{"", args{[]int{}, []int{2, 3, 4}, []int{}, [][]int{}}, [][]int{{2, 3, 4}}},
		{"", args{[]int{2, 3, 4}, []int{}, []int{}, [][]int{}}, [][]int{{2, 3, 4}}},
		{"", args{[]int{}, []int{2}, []int{}, [][]int{}}, [][]int{{2}}},
		{"", args{[]int{4}, []int{6, 7}, []int{1, 2, 3}, [][]int{}}, [][]int{{1, 2, 3, 4, 6, 7}, {1, 2, 3, 6, 4, 7}, {1, 2, 3, 6, 7, 4}}},
		{"", args{[]int{1}, []int{2}, []int{}, [][]int{}}, [][]int{{1, 2}, {2, 1}}},
		{"", args{[]int{2, 3}, []int{4, 5}, []int{1}, [][]int{}}, [][]int{{1, 2, 3, 4, 5}, {1, 2, 4, 3, 5}, {1, 2, 4, 5, 3}, {1, 4, 2, 3, 5}, {1, 4, 2, 5, 3}, {1, 4, 5, 2, 3}}},
		{"", args{[]int{2, 3, 4}, []int{5, 6, 7}, []int{1}, [][]int{}}, [][]int{{1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 5, 4, 6, 7}, {1, 2, 3, 5, 6, 4, 7}, {1, 2, 3, 5, 6, 7, 4}, {1, 2, 5, 3, 4, 6, 7}, {1, 2, 5, 3, 6, 4, 7}, {1, 2, 5, 3, 6, 7, 4}, {1, 2, 5, 6, 3, 4, 7}, {1, 2, 5, 6, 3, 7, 4}, {1, 2, 5, 6, 7, 3, 4}, {1, 5, 2, 3, 4, 6, 7}, {1, 5, 2, 3, 6, 4, 7}, {1, 5, 2, 3, 6, 7, 4}, {1, 5, 2, 6, 3, 4, 7}, {1, 5, 2, 6, 3, 7, 4}, {1, 5, 2, 6, 7, 3, 4}, {1, 5, 6, 2, 3, 4, 7}, {1, 5, 6, 2, 3, 7, 4}, {1, 5, 6, 2, 7, 3, 4}, {1, 5, 6, 7, 2, 3, 4}}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := merge(tt.args.left, tt.args.right, tt.args.prefix, tt.args.res); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("merge() = %v, want %v", got, tt.want)
			}
		})
	}
}
